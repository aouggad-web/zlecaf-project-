name: Bootstrap AfCFTA 2025 Datasets

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl

      - name: Generate AfCFTA datasets (2025+) + Tax kit + Prompts + Validator
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p frontend/public/data backend/tools prompts/zlecaf_tariffs

          python - <<'PY'
import os, csv, json
from datetime import datetime
import pandas as pd

# --- Countries (54) ---
countries = [
    "Algeria","Angola","Benin","Botswana","Burkina Faso","Burundi","Cabo Verde","Cameroon",
    "Central African Republic","Chad","Comoros","Congo","Congo, Dem. Rep.","Côte d’Ivoire",
    "Djibouti","Egypt","Equatorial Guinea","Eritrea","Eswatini","Ethiopia","Gabon","Gambia",
    "Ghana","Guinea","Guinea-Bissau","Kenya","Lesotho","Liberia","Libya","Madagascar","Malawi",
    "Mali","Mauritania","Mauritius","Morocco","Mozambique","Namibia","Niger","Nigeria","Rwanda",
    "Sao Tome and Principe","Senegal","Seychelles","Sierra Leone","Somalia","South Africa",
    "South Sudan","Sudan","Tanzania","Togo","Tunisia","Uganda","Zambia","Zimbabwe"
]

# --- HS6 sample (échantillon multi-chapitres ; remplacé ensuite par extraction Lyra+) ---
sample_hs6 = [
    ("010121","Live horses, pure-bred breeding"),
    ("020130","Bovine cuts, fresh/chilled"),
    ("040221","Milk and cream, concentrated"),
    ("100630","Semi-milled or wholly milled rice"),
    ("151000","Olive oil, virgin"),
    ("170199","Refined cane or beet sugar"),
    ("190531","Sweet biscuits"),
    ("271019","Petroleum oils (other than crude), nes"),
    ("300490","Medicaments, nes, for retail sale"),
    ("330499","Beauty/makeup preparations, nes"),
    ("340111","Soap, for toilet use"),
    ("390110","Polyethylene, specific gravity < 0.94"),
    ("401110","New pneumatic tyres, of rubber, for motor cars"),
    ("480257","Paper and paperboard, coated"),
    ("481920","Folding cartons, boxes and cases"),
    ("640399","Footwear with outer soles of rubber/plastics"),
    ("721420","Bars and rods, hot-rolled, alloy steel"),
    ("730890","Structures and parts of structures, iron/steel"),
    ("760110","Aluminium, not alloyed"),
    ("840733","Spark-ignition engines, >250 cc"),
    ("850110","Electric motors of an output not exceeding 37.5 W"),
    ("870322","Passenger vehicles, spark-ignition, 1.0-1.5L"),
    ("940360","Wooden furniture, other")
]
years = list(range(2025, 2036))  # 2025..2035

# --- 1) ZLECAf: datasets tarifaires 2025+ ---
os.makedirs("frontend/public/data", exist_ok=True)

# 1.a) Matrice "phase/sensitive/excluded/immediate" en Excel (avec metadata)
from openpyxl import Workbook
wb = Workbook()
ws = wb.active; ws.title = "dismantling_matrix"
matrix_cols = ["HS2","HS6","Description"] + countries
ws.append(matrix_cols)
for hs6, desc in sample_hs6:
    row = {"HS2": hs6[:2], "HS6": hs6, "Description": desc}
    for c in countries: row[c] = ""
    ws.append([row.get(k, "") for k in matrix_cols])

ws2 = wb.create_sheet("metadata")
ws2.append(["key","value"])
ws2.append(["generated_at_utc", datetime.utcnow().isoformat()+"Z"])
ws2.append(["year_horizon", "2025..2035"])
ws2.append(["matrix_values_expected", "Phase1/Phase2/Phase3/Sensitive/Excluded/Immediate"])
wb.save("frontend/public/data/zlecaf_hs6_master_2025.xlsx")

# 1.b) Taux par année (long)
import pandas as pd
long_rows = []
for hs6, _ in sample_hs6:
    for c in countries:
        for y in years:
            long_rows.append([c, hs6, y, "", "", "", "", ""])
pd.DataFrame(long_rows, columns=["country","hs6","year","mfn_rate_pct","afcfta_rate_pct","schedule","immediate_flag","source_url"])\
  .to_csv("frontend/public/data/zlecaf_afcfta_rates_by_year_2025.csv", index=False)

# 1.c) Démantelé immédiatement (liste vierge à remplir)
imm_rows = []
for hs6, desc in sample_hs6:
    for c in countries:
        imm_rows.append([c, hs6, desc, "", "", "", "", ""])
pd.DataFrame(imm_rows, columns=["country","hs6","description","start_year","mfn_rate_pct","afcfta_rate_start_pct","immediate_flag","source_url"])\
  .to_csv("frontend/public/data/zlecaf_immediate_dismantled_2025.csv", index=False)

# 1.d) Prompt Lyra+ pour extraction tarifaire 2025+
prompt_tariff = """You are **LYRA-PRO**, a master-level AI prompt optimization specialist for AfCFTA customs analytics.

## Objective
Populate two normalized datasets from authoritative AfCFTA sources (years 2025..2035):
1) zlecaf_afcfta_rates_by_year_2025.csv
   Columns: country, hs6, year, mfn_rate_pct, afcfta_rate_pct, schedule, immediate_flag, source_url
2) zlecaf_immediate_dismantled_2025.csv
   Columns: country, hs6, description, start_year, mfn_rate_pct, afcfta_rate_start_pct, immediate_flag, source_url

## Rules
- No invention; cite exact URLs (AfCFTA e-Tariff, UNCTAD AfCFTA Offers, national legal sources).
- hs6 as 6-digit string; years in [2025,2035]; rates numeric 0..100 or empty.
"""
os.makedirs("prompts/zlecaf_tariffs", exist_ok=True)
open("prompts/zlecaf_tariffs/lyra_plus_prompt_2025.md","w",encoding="utf-8").write(prompt_tariff)

# --- 2) TVA & taxes intérieures 2025+ (kit calculateur) ---
# 2.a) VAT
with open("frontend/public/data/vat_rates_2025.csv","w",newline="",encoding="utf-8") as f:
    w = csv.writer(f)
    w.writerow(["country","iso2","iso3","currency","vat_standard_pct","vat_reduced_pct_list","vat_zero_rated_scope","vat_exempt_scope","registration_threshold_local","import_vat_rate_pct","refund_period_days","authority","legal_ref_title","legal_ref_url","effective_date","last_verified","source_confidence","notes"])
    for c in countries:
        w.writerow([c,"","","","","","","","","","","","","","","","",""])

# 2.b) Levies
with open("frontend/public/data/customs_levies_2025.csv","w",newline="",encoding="utf-8") as f:
    w = csv.writer(f)
    w.writerow(["country","levy_code","levy_name","rate_type","rate_value","unit","min_amount","max_amount","base_formula","applies_on","scope","hs_scope","authority","legal_ref_title","legal_ref_url","effective_date","last_verified","source_confidence","notes"])
    for c in countries:
        w.writerow([c,"STAT","Statistical levy","","","","","","BASE=CIF","import","ALL","","","","","","","",""])
        w.writerow([c,"INSPE","Inspection fee","","","","","","BASE=CIF","import","ALL","","","","","","","",""])

# 2.c) Excise (HS6)
open("frontend/public/data/excise_schedule_2025.csv","w",encoding="utf-8").write(",".join([
    "country","hs6","product_category","excise_type","rate_value","unit","base_formula","authority","legal_ref_title","legal_ref_url","effective_date","last_verified","source_confidence","notes"
])+"\n")

# 2.d) Ordre de calcul
import json
default_order = json.dumps(["customs_duty","excise","levies","vat"])
default_vat_base = "VAT_BASE = CIF + CustomsDuty + Excise + Levies"
with open("frontend/public/data/tax_computation_order_2025.csv","w",newline="",encoding="utf-8") as f:
    w = csv.writer(f); w.writerow(["country","order_json","vat_base_formula","rounding_rules","method_notes"])
    for c in countries:
        w.writerow([c, default_order, default_vat_base, "round to nearest unit at final step", "override if national law differs"])

# 2.e) Prompt Lyra+ TVA/taxes
prompt_tax = """You are **LYRA-PRO**, a master-level AI prompt optimization specialist for AfCFTA customs & tax analytics.

## TARGET (2025+)
Populate VAT / levies / excise / computation order from authoritative sources (UNCTAD, WTO, national).
- No invention; provide legal_ref_title + legal_ref_url; dates ISO; source_confidence (3=law,2=official portal,1=secondary).
"""
open("prompts/zlecaf_tariffs/lyra_plus_tax_prompt_2025.md","w",encoding="utf-8").write(prompt_tax)

# --- 3) Validateur schéma (rates_by_year 2025..2035) ---
validator = r'''import sys, pandas as pd
path = sys.argv[1] if len(sys.argv)>1 else "frontend/public/data/zlecaf_afcfta_rates_by_year_2025.csv"
df = pd.read_csv(path)
req = ["country","hs6","year","mfn_rate_pct","afcfta_rate_pct","schedule","immediate_flag","source_url"]
missing = [c for c in req if c not in df.columns]
if missing: print("Missing columns:", missing); raise SystemExit(1)
if (df["year"]<2025).any() or (df["year"]>2035).any(): print("Year out of bounds"); raise SystemExit(2)
def oknum(x):
    try:
        import math, numpy as np
        if pd.isna(x) or x=="":
            return True
        float(x); return True
    except Exception:
        return False
for c in ["mfn_rate_pct","afcfta_rate_pct"]:
    if not df[c].apply(oknum).all():
        print("Non-numeric in", c); raise SystemExit(3)
print("Schema OK. Rows:", len(df))
'''
os.makedirs("backend/tools", exist_ok=True)
open("backend/tools/validate_schema_2025.py","w").write(validator)
PY

      - name: Validate schema (rates 2025+)
        run: python backend/tools/validate_schema_2025.py frontend/public/data/zlecaf_afcfta_rates_by_year_2025.csv

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "data(afcfta-2025): bootstrap datasets + tax kit + prompts + validator"
          branch: "feat/bootstrap-afcfta-2025"
          title: "Bootstrap AfCFTA datasets 2025+ (tariffs + VAT/Levies/Excise) — Lyra+ ready"
          body: |
            - Ajout datasets ZLECAf 2025+ (rates_by_year, immediate, matrice HS6)
            - Kit fiscalité: TVA/levies/accises + ordre de calcul
            - Prompts Lyra+ (tarifs + taxes)
            - Validateur schéma (2025..2035)
          labels: data, afcfta, lyra-plus
