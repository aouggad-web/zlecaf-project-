#!/usr/bin/env python3
"""
Script pour pr√©parer et initialiser l'environnement de l'application ZLECAf.
Peut √™tre utilis√© pour cr√©er des donn√©es de d√©monstration et v√©rifier la configuration.
"""

import argparse
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
import asyncio
import json
from datetime import datetime

# Charger les variables d'environnement
ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')


async def check_database_connection():
    """V√©rifier la connexion √† la base de donn√©es"""
    try:
        mongo_url = os.environ.get('MONGO_URL')
        if not mongo_url:
            print("‚ùå MONGO_URL non d√©finie dans .env")
            return False
        
        client = AsyncIOMotorClient(mongo_url, serverSelectionTimeoutMS=5000)
        db = client[os.environ.get('DB_NAME', 'zlecaf')]
        
        # Test de ping
        await db.command('ping')
        print("‚úÖ Connexion √† MongoDB √©tablie")
        
        # Afficher les collections existantes
        collections = await db.list_collection_names()
        print(f"üì¶ Collections existantes: {', '.join(collections) if collections else 'aucune'}")
        
        client.close()
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur de connexion √† MongoDB: {e}")
        print("‚ÑπÔ∏è  L'application peut fonctionner sans MongoDB pour certaines fonctionnalit√©s")
        return False


async def create_demo_data():
    """Cr√©er des donn√©es de d√©monstration dans la base de donn√©es"""
    try:
        mongo_url = os.environ.get('MONGO_URL')
        client = AsyncIOMotorClient(mongo_url)
        db = client[os.environ.get('DB_NAME', 'zlecaf')]
        
        print("\nüöÄ Cr√©ation de donn√©es de d√©monstration...")
        
        # Cr√©er quelques calculs de d√©monstration
        demo_calculations = [
            {
                "calculation_id": "demo-001",
                "origin_country": "MA",
                "destination_country": "SN",
                "hs_code": "847989",
                "product_value": 50000,
                "normal_tariff": 2500,
                "zlecaf_tariff": 0,
                "savings": 2500,
                "created_at": datetime.now().isoformat()
            },
            {
                "calculation_id": "demo-002",
                "origin_country": "KE",
                "destination_country": "TZ",
                "hs_code": "010121",
                "product_value": 10000,
                "normal_tariff": 2500,
                "zlecaf_tariff": 0,
                "savings": 2500,
                "created_at": datetime.now().isoformat()
            },
            {
                "calculation_id": "demo-003",
                "origin_country": "ZA",
                "destination_country": "NG",
                "hs_code": "620342",
                "product_value": 25000,
                "normal_tariff": 7500,
                "zlecaf_tariff": 0,
                "savings": 7500,
                "created_at": datetime.now().isoformat()
            }
        ]
        
        # Ins√©rer les calculs de d√©monstration
        for calc in demo_calculations:
            result = await db.comprehensive_calculations.update_one(
                {"calculation_id": calc["calculation_id"]},
                {"$set": calc},
                upsert=True
            )
            print(f"‚úÖ Calcul de d√©mo {calc['calculation_id']} cr√©√©/mis √† jour")
        
        # Afficher les statistiques
        count = await db.comprehensive_calculations.count_documents({})
        print(f"\nüìä Total de calculs dans la base: {count}")
        
        client.close()
        print("‚úÖ Donn√©es de d√©monstration cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        return False


async def verify_environment():
    """V√©rifier que toutes les variables d'environnement n√©cessaires sont pr√©sentes"""
    print("\nüîç V√©rification de l'environnement...")
    
    required_vars = ['MONGO_URL', 'DB_NAME']
    optional_vars = ['CORS_ORIGINS']
    
    all_ok = True
    for var in required_vars:
        value = os.environ.get(var)
        if value:
            # Masquer les infos sensibles
            if 'URL' in var or 'PASSWORD' in var:
                display_value = value[:10] + "..." if len(value) > 10 else "***"
            else:
                display_value = value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: non d√©finie")
            all_ok = False
    
    for var in optional_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚ÑπÔ∏è  {var}: {value}")
        else:
            print(f"‚ö†Ô∏è  {var}: non d√©finie (optionnel)")
    
    return all_ok


def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description='Initialiser l\'environnement ZLECAf')
    parser.add_argument('--demo', action='store_true', help='Cr√©er des donn√©es de d√©monstration')
    parser.add_argument('--check', action='store_true', help='V√©rifier uniquement la configuration')
    
    args = parser.parse_args()
    
    print("=" * 70)
    print("üåç ZLECAf Release Manager")
    print("=" * 70)
    
    # V√©rifier l'environnement
    env_ok = asyncio.run(verify_environment())
    
    if not env_ok:
        print("\n‚ùå Environnement incomplet. Cr√©ez un fichier .env avec les variables n√©cessaires.")
        sys.exit(1)
    
    # V√©rifier la connexion √† la base de donn√©es
    db_ok = asyncio.run(check_database_connection())
    
    if not db_ok and args.demo:
        print("\n‚ùå MongoDB requis pour cr√©er des donn√©es de d√©monstration.")
        sys.exit(1)
    
    # Cr√©er des donn√©es de d√©mo si demand√©
    if args.demo:
        demo_ok = asyncio.run(create_demo_data())
        if not demo_ok:
            sys.exit(1)
    
    if args.check:
        print("\n‚úÖ Toutes les v√©rifications ont r√©ussi!")
        sys.exit(0)
    
    print("\n" + "=" * 70)
    print("‚úÖ Release pr√©par√©e avec succ√®s!")
    print("=" * 70)
    print("\nPour d√©marrer l'application:")
    print("  Backend:  cd backend && python -m uvicorn server:app --reload --host 0.0.0.0 --port 8000")
    print("  Frontend: cd frontend && npm run dev")
    print("\nEndpoints disponibles:")
    print("  Health:   http://localhost:8000/api/health")
    print("  API Root: http://localhost:8000/api/")
    print("  Frontend: http://localhost:3000")
    print("=" * 70)


if __name__ == "__main__":
    main()
