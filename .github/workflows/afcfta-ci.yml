name: AfCFTA CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-test-backend:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run backend tests
        run: |
          pytest backend/ tests/ -v --tb=short
  
  lint-and-test-frontend:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      
      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile
      
      - name: Lint code
        working-directory: frontend
        run: |
          yarn lint || echo "Linting completed with warnings"
      
      - name: Run tests
        working-directory: frontend
        run: |
          yarn test --watchAll=false --passWithNoTests
  
  data-pipeline-validation:
    name: Data Pipeline Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install data processing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl requests
      
      - name: Validate ZLECAf data files
        run: |
          python verify_data_quality.py
      
      - name: Check tariff corrections
        run: |
          python -c "import json; json.load(open('zlecaf_corrections_2024.json'))" && echo "✅ JSON valid"
  
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint-and-test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      
      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile
      
      - name: Build application
        working-directory: frontend
        run: yarn build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7
  
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend, lint-and-test-frontend]
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      - name: Run backend server
        env:
          MONGO_URL: mongodb://admin:testpassword@localhost:27017
          DB_NAME: zlecaf_test
        run: |
          cd backend
          uvicorn server:app --host 0.0.0.0 --port 8000 &
          sleep 10
      
      - name: Test API endpoints
        run: |
          curl -f http://localhost:8000/api/countries || exit 1
          curl -f http://localhost:8000/api/statistics || exit 1
          echo "✅ API endpoints responding"
